<!DOCTYPE html>
<html lang="en">

<head>


    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

</head>
<style>
    #text-written {
        width: 20%;
        border: 1px;
        height: 100%;
    }
</style>

<%- include('../partials/heading.hbs') %>

    <body>
        <div class="container " style="width: 80%;  margin-bottom:40px; border-radius:12px;">
            <div class="p-4"
                style="border: 2px solid rgb(169, 169, 199); background-color: rgb(230, 230, 250);border-radius:16px;">
                <h2>Create Your Content</h2>

                <div class="form-group">
                    <label for="topic"
                        style="font-size: 20px; margin-bottom: 5px;font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;">Select
                        a Category</label>
                    <select name="Subjects" style=" border-radius:10px;" id="Subject" class="form-control">
                        <option value="History">History</option>
                        <option value="Geography">Geography</option>
                        <option value="Physics">Physics</option>
                        <option value="Technology">Technology</option>
                    </select>
                </div> <br>
                <div class="form-group">
                    <label for="topic"
                        style="font-size: 20px; margin-bottom: 5px;font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;">Select
                        a level</label>
                    <select name="grade" style=" border-radius:10px;" id="grade" class="form-control">
                        <option value="default" selected>---select your level----</option>
                        <option value="8">class 8</option>
                        <option value="5">class 5</option>
                        <option value="9">class 9</option>
                        <option value="10">class 10</option>
                        <option value="11">class 11</option>
                    </select>
                </div> <br>
                <div class="input-group-prepend">
                    <label for="topic"
                        style="font-size: 20px; margin-bottom: 5px;font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;">Enter
                        Topic name</label>
                    <input type="text" style=" border-radius:10px;" id="topic" class="form-control"
                        aria-describedby="basic-addon2">
                </div>

                <div class="input-group-prepend">
                    <label for="topic"
                        style="font-size: 20px; margin-bottom: 5px;font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;">Enter
                        Topic Details</label>
                    <input type="text" style=" border-radius:10px;" id="topicdetails" class="form-control"
                        aria-describedby="basic-addon2">
                </div>

                <div class="input-group-prepend">
                    <label for="Page"
                        style="font-size: 20px; margin-bottom: 5px;font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;">Enter
                        Page Number</label>
                        <input type="number" style="border-radius: 10px;" id="Page" class="form-control" value="1" aria-describedby="basic-addon2" max="15" min="1">

                </div>

                <div class="form-group mt-1">
                    <button class="btn btn-primary" style=" border-radius:17px;" class="primary"
                        onclick="getText()">Edit</button>
                </div>

                <div class="form-group mt-3" style="width: 100%;">
                    <label for="topic"
                        style="font-size: 20px; margin-bottom: 5px;font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;">Type
                        the Content for Your article</label>
                    <textarea id="mytextarea" placeholder="Enter note" name="note" class="form-control" rows="10"
                        style="height: 500px; width:100%; border-radius:17px;"></textarea>
                </div><br>
                <div class="form-group">
                    <button class="btn btn-primary" style=" border-radius:17px;" class="primary"
                        onclick="saveText()">Save note</button>
                </div><br>
            </div>

            <div class="form-group mt-3"
                style="border: 1px solid rgb(87, 74, 74); margin-bottom: 20px; border-radius:16px;">
                <div class="p-4" style=" background-color: rgb(230, 230, 250);border-radius:16px;">
                    <h3>Insert Image in the article</h3>
                    <label for="topic"
                        style="font-size: 20px; margin-bottom: 5px;font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;">Enter
                        file details</label><br>

                    <input type="text" style=" border-radius:10px;" id="filename" class="form-control"
                        placeholder="Enter filename"><br>
                    <input type="file" style=" border-radius:10px;" class="form-control" id="imageInput"><br>
                    <button class="btn btn-primary" style=" border-radius:17px;" onclick="uploadImage()">Insert
                        Image</button>

                    <!-- <form action="/upload" method="post" id="image-form" enctype="multipart/form-data">
                            <input type="file" name="file" id="fileInput" accept=".jpg, .jpeg, .png">
                            <button type="submit">Upload</button>
                          </form> -->
                </div>
            </div>
        </div>

        <div class="container  " style="width: 60%;  margin-bottom:40px; border-radius:12px;">
            <div class="p-4" style=" background-color: rgb(230, 230, 250);width: 100%;border-radius:16px;"
                id="text-written">

            </div>
        </div>

    </body>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css"
        integrity="sha384-DyZ88mC6Up2uqS4h/KRgHuoeGwBcD4Ng9SiP4dIRy0EXTlnuz47vAwmeGwVChigm" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"
        integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"
        integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
        crossorigin="anonymous"></script>



    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-storage.js"></script>
    <script src="https://cdn.tiny.cloud/1/no-api-key/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-database.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-firestore.js"></script>

    <script>

        let articletoBeModified
        const firebaseConfig = {
            apiKey: "AIzaSyAZ9x_QbhCfY9aEsqxEiYhWtfIRNGl_qeo",
            authDomain: "mynewproject-ae49a.firebaseapp.com",
            projectId: "mynewproject-ae49a",
            storageBucket: "mynewproject-ae49a.appspot.com",
            messagingSenderId: "939005557600",
            appId: "1:939005557600:web:ee766070db4bd2dadfbc05",
            measurementId: "G-YFKTT151SN"
        };

        firebase.initializeApp(firebaseConfig);
        const currentTime = Date.now();
        var database = firebase.database()
        var storageRef = firebase.storage().ref();
        var imageRef = storageRef.child('images/');
        let width;
        let height;

        tinymce.init({
            selector: '#mytextarea'
        });
        function saveText() {
            let text = tinymce.get('mytextarea').getContent();
            $('#text-written').html(text)
            savedata(text)
        }

        async function savedata(data) {
            let dataObject
            let subject = document.getElementById('Subject').value
            let topic = document.getElementById('topic').value
            let topicdetails = document.getElementById('topicdetails').value
            let grade1 = document.getElementById('grade').value
            let Page = document.getElementById('Page').value



            const result = await InspectDocuments(subject)
            const db = firebase.firestore();
            const collectionRef = db.collection('articles').doc(subject);
            let text = data.replace(/\n \+/g, "<br>");
            if (articletoBeModified) {
                articletoBeModified.Text[Page - 1] = text
                let highestIndex = -1; // Initialize with a value that's less than any valid array index
                let maxindex = []
                articletoBeModified.Text.forEach((text, index) => {                    // if (typeof articletoBeModified[i] !== 'undefined' && i > highestIndex) {
                    //     highestIndex = i;
                    // }
                    maxindex.push(index)
                })
                const max = Math.max(...maxindex);
                console.log(max)
                for (let i = 0; i < 9; i++) {
                    if (typeof (articletoBeModified.Text[i]) == 'undefined') {

                        articletoBeModified.Text[i] = ''
                    }
                }
                // articletoBeModified.Text.forEach((text, index) => {
                //     console.log("sssssssssssssssss")
                // 
                // })
                dataObject = {
                    [topic]: {
                        Text: articletoBeModified.Text,
                        Topicdetails: topicdetails,
                        Subject: subject,
                        time: currentTime,
                        topicName: topic,
                        class: grade1
                    }

                };
            }
            else {
                let b = []
                b.push(text)
                dataObject = {
                    [topic]: {
                        Text: b,
                        Topicdetails: topicdetails,
                        Subject: subject,
                        time: currentTime,
                        topicName: topic,
                        class: grade1
                    }
                };
            }


            if (result) {
                console.log(dataObject)
                collectionRef.update(dataObject)
                    .then(docRef => {
                        console.log('Document updated with ID: ');
                        if (articletoBeModified) {
                            let Page = document.getElementById('Page').value

                            dataObject.Text = articletoBeModified.Text[Page - 1]

                        }
                        else {
                            dataObject.Text = []
                        }

                    })
                    .catch(error => {
                        // if (articletoBeModified) {
                        //     let Page = document.getElementById('Page').value

                        //     dataObject.Text=articletoBeModified.Text[Page-1]

                        // }
                        // else{
                        //     dataObject.Text=[]
                        // }
                        console.error('Error adding document: ', error);
                    });
            }
            else {
                collectionRef.set(dataObject)
                    .then(docRef => {
                        console.log('Document added with ID: ');
                    })
                    .catch(error => {
                        console.error('Error adding document: ', error);
                    });
            }

        }

        async function InspectDocuments(sub) {
            let result = false
            const db = firebase.firestore();
            const collectionRef = db.collection('articles');
            return collectionRef.get()
                .then(async (querySnapshot) => {
                    querySnapshot.forEach((doc) => {

                        if (doc.id == sub) {
                            result = true

                        }

                    });
                    return result

                })
                .catch((error) => {
                    console.log('Error getting documents: ', error);
                });
        }

        async function getText() {
            let alldata = await getAllArticles()
            let topic = document.getElementById('topic').value
            let topicdetails = document.getElementById('topicdetails').value
            let subject = document.getElementById('Subject').value
            let Page = document.getElementById('Page').value

            alldata.forEach((e) => {
                if ((e.Subject == subject) && (e.topicName == topic)) {
                    articletoBeModified = e
                    document.getElementById('topicdetails').value = e.Topicdetails
                    // document.getElementById('mytextarea').value=e.Text
                    tinymce.get('mytextarea').setContent(e.Text[Page - 1]);
                }
            })

        }

        function uploadImage() {
            var file = document.getElementById('imageInput').files[0]
            // width = document.getElementById('width').value
            // height = document.getElementById('height').value
            var imageSrc = file.name;
            saveImageData(file)
        }

        function saveImageData(file) {
            filename = document.getElementById('filename').value
            const ref = firebase.storage().ref();
            ref.child("images/" + filename).put(file)
                // imageRef.put(file)
                .then(function (snapshot) {
                    console.log('Image uploaded successfully.');
                    // Retrieve the download URL of the uploaded image and store it in the database
                    snapshot.ref.getDownloadURL()
                        .then(function (downloadURL) {
                            console.log(downloadURL)
                            saveImageURLToDatabase(downloadURL, filename);
                        });
                })
                .catch(function (error) {
                    console.error('Error uploading image:', error);
                });
        }

        function saveImageURLToDatabase(downloadURL, name) {
            const db = firebase.firestore();
            const collectionRef = db.collection('images').doc('allArticles');
            // Assuming you have an image object to push
            var imageObject = {
                [name]: {
                    imageUrl: downloadURL,
                    caption: name
                }
            };

            collectionRef.update(imageObject)
                .then(docRef => {
                    tinymce.activeEditor.execCommand('mceInsertContent', false, `<img src="${downloadURL}" alt="Image">`);
                })
                .catch(error => {
                    console.error('Error adding document: ', error);
                });

        }

        //////////---------------------------------------////////////////

        document.getElementById("image-form").addEventListener("submit", function (event) {
            event.preventDefault(); // Prevent the default form submission behavior

            const formData = new FormData();
            const fileInput = document.getElementById("fileInput");
            formData.append("file", fileInput.files[0]);

            // Send the file to the server using fetch API
            fetch("/upload", {
                method: "POST",
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    const fileUrl = data.fileUrl;
                    // Display the file URL in the HTML
                    // const fileUrlContainer = document.getElementById("fileUrlContainer");
                    // fileUrlContainer.innerHTML = `<p>File URL: <a href="${fileUrl}" target="_blank">${fileUrl}</a></p>`;
                })
                .catch(error => {
                    console.error("Error uploading file:", error);
                });
        });
        //})

        async function getAllArticles() {
            const db = firebase.firestore();
            let result = []
            let promise = new Promise((resolve, reject) => {
                const collectionRef = db.collection('articles').get();
                collectionRef.then(async (querySnapshot) => {
                    querySnapshot.forEach((doc) => {
                        let keys = Object.keys(doc.data())
                        for (const el in doc.data()) {
                            result.push(doc.data()[el])
                        }
                    })
                    resolve(result)
                })
            })
            return promise

        }

        const pageInput = document.getElementById('Page');

  // Add an input event listener to perform validation
  pageInput.addEventListener('input', function () {
    const inputValue = parseInt(pageInput.value, 10); // Parse the input value as an integer

    // Check if the input is greater than or equal to 1 and less than 15
    if (inputValue >= 1 && inputValue < 15) {
      // The input is valid, you can perform any desired action here
      console.log('Input is valid:', inputValue);
    } else {
      // The input is invalid, you can display an error message or take other actions
      console.log('Input is invalid');
    }
  });
    </script>


</html>