<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<style>
    p {
        margin-left: 12px;
    }
</style>



<body>
    <%- include('../partials/heading.hbs') %>

        <div id="tags" style="display: none;">
            <%=articles%>
        </div>
        <div id="documents" style="display: none;">
            <%=documents%>
        </div>
        <div class="input-group-prepend">
            <label for="topic"
                style="font-size: 20px; margin-bottom: 5px;font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;">Enter
                Queries</label>
            <input type="text" style=" border-radius:10px; width: 70%; height: 40px; margin-top:20px" id="queries"
                class="form-control" aria-describedby="basic-addon2">

            <button class="btn btn-primary mt-4" style=" border-radius:17px;" onclick="search()">
                search</button>
        </div>


        <div id="Ans" class="" style="width: 100%; ">

        </div>

        <div id="dd" style="display: none;">

        </div>
        <div id="sample" style="display: none;"></div>
        <div id="sample1" style="display: none;"></div>

</body>

</html>

<script>
    let alltags
    let Tags
    let Documents
    let alltopicdetails = []
    getAllTags()
    getAlldocuments()
    let text



    function getAllTags() {
        let tags = JSON.parse(document.getElementById('tags').innerText)
        Tags = tags.Tags

        let html = `<p>Two triangles are&nbsp;<a href="https://www.mathsisfun.com/geometry/similar.html">Similar</a>&nbsp;if the only difference is size (and possibly the need to turn or flip one around).</p><p class="center">These triangles are all similar:</p><p class="center"><img src="https://www.mathsisfun.com/geometry/images/tri-similar1.svg" alt="triangles similar different sizes and rotations" width="388" height="168"></p><p class="center">(Equal angles have been marked with the same number of arcs)</p><p>Notice that, as well as different sizes, some of them are turned or flipped.</p><p>&nbsp;</p><p>For similar triangles:</p><p class="center"><img src="https://www.mathsisfun.com/geometry/images/tri-corresponding-angles.svg" alt="corresponding angles on two triangles" width="272" height="126"><br>All corresponding angles are equal</p><p class="center"><em>and</em></p><p class="center"><img src="https://www.mathsisfun.com/geometry/images/tri-corresponding-sides.svg" alt="corresponding sides on two triangles" width="277" height="152"><br>All corresponding sides have the same&nbsp;<a href="https://www.mathsisfun.com/numbers/ratio.html">ratio</a></p><p>Also notice that the&nbsp;<span class="center">corresponding sides</span>&nbsp;face the corresponding angles. For example the sides that face the angles with two arcs&nbsp;are corresponding.</p><h2>Corresponding Sides</h2><p>In similar triangles,&nbsp;<span class="center">corresponding</span>&nbsp;sides are always in the same ratio.</p><p>For example:</p><p class="center"><img src="https://www.mathsisfun.com/geometry/images/tri-similar2.svg" alt="triangles similar R: (6,7,8) and S: (b,a,6.4)" width="360" height="133"></p><p>Triangles&nbsp;<strong>R</strong>&nbsp;and&nbsp;<strong>S</strong>&nbsp;are similar. The equal angles are marked with the same numbers of arcs.</p><p>What are the corresponding lengths?</p><ul><li>The lengths&nbsp;<strong>7</strong>&nbsp;and&nbsp;<strong>a</strong>&nbsp;are corresponding (they face the angle marked with one arc)</li><li>The lengths&nbsp;<strong>8</strong>&nbsp;and&nbsp;<strong>6.4</strong>&nbsp;are corresponding (they face the angle marked with two arcs)</li><li>The lengths&nbsp;<strong>6</strong>&nbsp;and&nbsp;<strong>b</strong>&nbsp;are corresponding (they face the angle marked with three arcs)</li></ul><h2>Calculating the Lengths of Corresponding Sides</h2><p>We can sometimes calculate lengths we don't know yet.</p><ul><li>Step 1: Find&nbsp;<strong>the ratio</strong>&nbsp;of corresponding sides</li><li>Step 2: Use that ratio to find the unknown lengths</li></ul><div class="example"><h3>Example: Find lengths a and b of Triangle S</h3><p class="center"><img src="https://www.mathsisfun.com/geometry/images/tri-similar2.svg" alt="triangles similar R: (6,7,8) and S: (b,a,6.4)" width="360" height="133"></p><h3>Step 1: Find the ratio</h3><p class="indent50px">We know all the sides in Triangle<strong>&nbsp;R</strong>, and<br>We know the side&nbsp;<strong>6.4</strong>&nbsp;in Triangle<strong>&nbsp;S</strong></p><p class="indent50px">The 6.4 faces the angle marked with two arcs as does the side of length 8 in triangle&nbsp;<strong>R</strong>.</p><p class="indent50px">So we can match&nbsp;<strong>6.4 with 8</strong>, and so the&nbsp;<a href="https://www.mathsisfun.com/numbers/ratio.html">ratio</a>&nbsp;of sides in triangle<strong>&nbsp;S</strong>&nbsp;to triangle&nbsp;<strong>R</strong>&nbsp;is:</p><p class="indent50px" align="center">6.4 to 8</p><p class="indent50px">Now we know that the lengths of sides in triangle<strong>&nbsp;S</strong>&nbsp;are all&nbsp;<strong>6.4/8 times</strong>&nbsp;the lengths of sides in triangle&nbsp;<strong>R</strong>.</p><h3>Step 2: Use the ratio</h3><div class="indent50px"><p><strong>a</strong>&nbsp;faces the angle with one arc as does the side of length 7 in triangle&nbsp;<strong>R</strong>.</p><div class="so"><strong>a</strong>&nbsp;= (6.4/8) &times; 7 = 5.6</div><p>&nbsp;</p><p><strong>b</strong>&nbsp;faces the angle with three arcs as does the side of length 6 in triangle&nbsp;<strong>R</strong>.</p><div class="so"><strong>b</strong>&nbsp;= (6.4/8) &times; 6 = 4.8</div><p>&nbsp;</p><p>Done!</p></div></div><div class="fun"><p><img src="https://www.mathsisfun.com/measure/images/thumb-distance-far.svg" alt="thumb distance far" width="" height=""></p><p>Did You Know? Similar triangles can help you&nbsp;<a href="https://www.mathsisfun.com/measure/estimate-distance.html">estimate distances</a>.</p></div>`
        document.getElementById('dd').innerHTML = html
        if (html.length > 0) {
            const htmlCollection = document.getElementsByTagName('p');
            // console.log(htmlCollection) // Replace 'p' with the tag name you want to select

            // Access the first element by index (index 0)
            // const firstElement = html[0];

            // Get the content of the first element
            // const firstLineContent = firstElement.textContent;

            // // Log or work with the content of the first line
            // console.log(firstelm);
        } else {
            console.log('HTML collection is empty.');
        }


    }

    function getAlldocuments() {
        let documents = JSON.parse(document.getElementById('documents').innerText)
        Documents = documents['Articledata']
        alltopicdetails = documents['Articledata'].map(e => e.Topicdetails.split(' '))
        // documents['Articledata'].forEach((e)=>{
        //     let b=[]
        //     e.Topicdetails.split(' ').forEach((d)=>{
        //         b.push(d.trim())
        //     })
        //     alltopicdetails.push(b)
        // })
    }

    function search() {

        document.getElementById('Ans').innerHTML = ``
        let query = document.getElementById('queries').value
        let arrayquery = query.split(' ')
        getTagsfromquery(arrayquery)
    }

    function getTagsfromquery(queryarr) {
        let resultantDoc
        let upatedquery = queryarr.map(e => e.toLowerCase())
        let tagsTosearch = Tags.filter(t => upatedquery.includes(t.tag.toLowerCase()))
        let docArr = tagsTosearch.map(document => document.doc)
        resultantDoc = findMostRepeatedElement(docArr)
        showthisDoc(resultantDoc, tagsTosearch)

    }

    function showthisDoc(resultdoc, tagsTosearch) {
        // console.log("this is search")
        // console.log(tagsTosearch)
        let html = ``
        let totaldocs = []

        tagsinques = tagsTosearch.map(e => e.tag)
        // console.log(tagsTosearch)

        console.log(tagsinques)
        let doci
        for (let i = 0; i < alltopicdetails.length; i++) {
            let result1 = containsAllWordsdet(tagsinques, alltopicdetails[i].filter(e => !e.includes('|')))
            let result2 = checkCommonelement(alltopicdetails[i].filter(e => e.includes('|')), tagsinques)
            // console.log(result1)
            // console.log(result2)
            // console.log(alltopicdetails[i])
            // console.log(tagsinques)
            // if(!result2){
            ///  console.log(result2,result1,alltopicdetails[i])
            //  }
            if (result1 && result2) {
                totaldocs.push(Documents[i])
                doci = Documents[i]
            } else {
                doci = null
            }

        }
        let html1 = []

        console.log("document")
        console.log(totaldocs)
        if (typeof (totaldocs) != 'undefined' && totaldocs.length > 0) {
            totaldocs.forEach((e) => {
                let doc = e


                if (doc != null) {
                    let value = getExactAnsFromtext(doc, tagsTosearch, html1)[0]

                    if (typeof (value) != 'undefined') {
                        // console.log("11111111")
                        html = value
                    }
                    else {
                        // console.log("222222222222")

                        html = '`<h1> Not found </h1>`'

                    }

                }
                else {
                    html = '`<h1> Not found </h1>`'
                }
            })
        }



        if (html.length != 0) {
            document.getElementById('dd').innerHTML = html

        }

        else {
            document.getElementById('dd').innerHTML = `<h1>Nothing found related to this</h1>`
        }

        let updatedHtml = getHTMLTags()
        settext(updatedHtml)
     text =undefined
        // html = ``

    }

    function removeDuplicates(arr) {
        return arr.filter((value, index, self) => self.indexOf(value) === index);
    }

    function getExactAnsFromtext(doc, tagsTosearch, html1) {
        let docs = []

        // let arrayofTexts = doc.Text.map(d => d.replace(/<[^>]*>/g, ''))
        let newtags = []
        let filteredquestions = []
        doc.questions[0].split(',').forEach((e) => {
            filteredquestions.push(e.trim())
        })

        tagsTosearch.forEach((dc) => {
            if (filteredquestions.includes(dc.tag)) {
                newtags.push(dc)
            }
        })

        //  tagsTosearch = removeDuplicates(newtags)
        //    console.log("new tags")
        //    console.log(tagsTosearch)
        let arrayofTexts = []
        if (tagsTosearch.length > 0) {
            doc.Text.forEach((e) => {
                document.getElementById('dd').innerHTML = e
                let text = document.getElementById('mmrg').innerText
                arrayofTexts.push(text)
                docs.push(document.getElementById('mmrg'))
            })
            // console.log("this is wordsto seach")
            // console.log(tagsTosearch)
            wordstosearch = tagsTosearch.map(e => e.tag)
            // console.log(arrayofTexts)

            // console.log(wordstosearch)
            let value1 = ArrwithAllwords(arrayofTexts, wordstosearch, doc.Text, docs, doc)
            let value2 = ArrwithAllwordsAlt(arrayofTexts, wordstosearch, doc.Text, docs, doc)
            // console.log(value1.length==0)
            // console.log(value2.length==0)
            // console.log(value1)
            // console.log(value2)

            // console.log(typeof(value2)=='string')
            // console.log(typeof(value1)=='undefined')
            // console.log(typeof(value2)=='string' && typeof(value1)=='undefined')

            if (typeof (value2) != 'undefined' && value1 !== null && value2 !== null &&
                typeof (value1) != 'undefined') {
                if (value1 != value2) {
                    console.log("not equal")
                    document.getElementById('sample').innerHTML = value2
                    document.getElementById('sample1').innerHTML = value1

                    let d1 = document.getElementById('sample')
                    let d2 = document.getElementById('sample1')
                    if (d1.querySelector('p#mmrg') != null && d2.querySelector('p#mmrg') != null) {
                        let tags1 = d1.querySelector('p#mmrg').innerText.split(',')
                        let tags2 = d2.querySelector('p#mmrg').innerText.split(',')
                        let result1 = tags1.every(word => wordstosearch.includes(word));
                        let result2 = tags2.every(word => wordstosearch.includes(word));
                         console.log(tags1)
                                               console.log(tags2)
                                                console.log(removeDuplicates(wordstosearch))
                                                let modData=removeDuplicates(wordstosearch)

                     console.log(value1)
                        //   
                        let c1=0
                        let c2=0                    
                        modData.forEach((word)=>{
                            if(tags1.includes(word)){
                            c2++
                            }
                            else if(tags2.includes(word)){
                                c1++
                            }
                            else{

                            }
                        })
                        console.log(c1)
                        console.log(c2)
                        if(c1==c2){
                            html1.push(value1)

                        }
                        else if(c1>c2){

                      html1.push(value1)
                        }
                        else{
                            html1.push(value2)

                        }


                        // if (result1 && result2) {
                        //     html1.push(value2)
                        // }

                        // else if (result1) {
                        //     html1.push(ArrwithAllwordsAlt(arrayofTexts, wordstosearch, doc.Text, docs, doc))

                        // }
                        // else if (result2) {
                        //     html1.push(ArrwithAllwords(arrayofTexts, wordstosearch, doc.Text, docs, doc))

                        // }
                        // else {

                        // }
                    }
                    else {
                    }
                }
                else {
                    // console.log("values are equal")
                    html1.push(ArrwithAllwords(arrayofTexts, wordstosearch, doc.Text, docs, doc))

                }
            }

            else if ((typeof (value1) == 'string')
                && (typeof (value2) == 'undefined')) {
                // console.log("first are defined")

                html1.push(value1)
                //     console.log("resulttant html")
                // console.log(html)
            }
            else if (typeof(value2)=='string' && typeof(value1)=='undefined') {
                // console.log("fffffff inside")

                //  html=`<h1>Not found</h1>`
                html1.push(value2)
                // 
                // console.log(html)

            }
            else {
                // console.log("not in arary")

                // html1.push(`<h2>Not found</h2>`)
            }
            // console.log("htmlkkkkkkkk")
            // console.log(html1)
           //return html1
        } else {
            console.log("not in arary")

            // return `<h1>No result found</h1>`
        }
        return html1


    }


    function containsAllWords(wordString, wordsToSearch) {
        let wordArray = []
        if (wordString.includes(',')) {
            wordString.split(',').forEach((e) => {
                wordArray.push(e.trim().toLowerCase())
            });

        }
        else {
            wordString.split(' ').forEach((e) => {
                wordArray.push(e.trim().toLowerCase())
            })

        }
        // console.log(wordstosearch)

        // console.log(wordArray)

        return (wordsToSearch.every(word => wordArray.includes(word.toLowerCase())));
    }

    // Check each string of words

    function ArrwithAllwords(arrayofTexts, wordsToSearch, htmlText, docs, doc) {
        for (let i = 0; i < arrayofTexts.length; i++) {

            if (containsAlternativewords(arrayofTexts[i], wordsToSearch)) {
                text = htmlText[i]
                // console.log(htmlText[i])
                break

            }

            // else if(containsAlternativewords(arrayofTexts[i], wordsToSearch)){
            //     text = htmlText[i]
            //     //console.log('found')

            // }
            // else {
            //     //  document.getElementById('dd').innerHTML = `<h1>Not Found</h1>`

            //     // console.log("not found")
            //     text = `<h1>Not Found</h1>`

            // }
        }
        return text
    }

    function ArrwithAllwordsAlt(arrayofTexts, wordsToSearch, htmlText, docs, doc) {
        for (let i = 0; i < arrayofTexts.length; i++) {

            if (containsAllWords(arrayofTexts[i], wordsToSearch)) {
                // console.log("matched")
                text = htmlText[i]
                // console.log(htmlText[i])
                break

            }


        }
        return text
    }



    function findMostRepeatedElement(arr) {
        // Create an object to store the frequency of each element
        const frequencyMap = {};

        // Initialize variables to keep track of the most repeated element and its frequency
        let mostRepeatedElement;
        let maxFrequency = 0;

        // Iterate through the array and update the frequency map
        for (const element of arr) {
            if (frequencyMap[element]) {
                frequencyMap[element]++;
            } else {
                frequencyMap[element] = 1;
            }

            // Check if the current element has a higher frequency than the previous most repeated element
            if (frequencyMap[element] > maxFrequency) {
                mostRepeatedElement = element;
                maxFrequency = frequencyMap[element];
            }
        }

        return mostRepeatedElement;
    }

    function removeElement(doc, htmlCollection) {
        const elementToRemove = doc
        let resulthtml
        // Check if the element exists in the collection
        if (elementToRemove) {
            // Remove the element from the collection
            const index = Array.from(htmlCollection).indexOf(elementToRemove);
            if (index !== -1) {
                resulthtml = htmlCollection[index].remove();
            } else {
                resulthtml = htmlCollection
                console.log('Element not found in the collection.');
            }
        } else {
            console.log('Element with ID "dd" not found.');
        }
        return resulthtml
    }


    function hasDuplicates(array) {
        const uniqueValues = new Set(); // Use a Set to store unique values

        for (const item of array) {
            if (uniqueValues.has(item)) {
                return true; // Found a duplicate
            }
            uniqueValues.add(item);
        }

        return false; // No duplicates found
    }

    function containsAllWordsdet(userTags, documentTags) {
        let contain1 = true
        // console.log("document tags")
        // console.log(documentTags)
        updatedUsertags = userTags.map(e => e.toLowerCase())
        if (documentTags.length != 0) {
            for (let i = 0; i < documentTags.length; i++) {
                if (updatedUsertags.indexOf(documentTags[i].toLowerCase()) === -1) {
                    contain1 = false
                    // return false;
                }
            }
        } else {
            contain1 = true
        }
        return contain1;
    }

    function isSpecificSubset(subset, superset) {
        for (let i = 0; i < subset.length; i++) {
            if (superset.indexOf(subset[i]) === -1) {
                return false;
            }
        }
        return true;
    }

    let index = 0;
    function settext(wordArray) {
        let html = ``
        for (let i = 0; i < wordArray.length; i++) {
            html += wordArray[i]
            setTimeout(() => {
                document.getElementById('Ans').innerHTML = document.getElementById('Ans').innerHTML + wordArray[i];
            }, i * 50); // Delay each word by i seconds
        }

    }






    // function htmlToArray(htmlString) {
    //   const tempDiv = document.createElement('div');
    //   tempDiv.innerHTML = htmlString;

    //   const childNodes = Array.from(tempDiv.childNodes);

    //   const resultArray = [];

    //   childNodes.forEach(node => {
    //     if (node.nodeType === Node.ELEMENT_NODE) {
    //       // If it's an HTML element, add it to the resultArray
    //       resultArray.push(node);
    //     } else if (node.nodeType === Node.TEXT_NODE) {
    //       // If it's a text node, split it by words and add each word to the resultArray
    //       const words = node.textContent.trim().split(/\s+/);
    //       words.forEach(word => {
    //         resultArray.push(document.createTextNode(word));
    //       });
    //     }
    //   });

    //   return resultArray;
    // }

    // function updatedHtml(){
    //     let content = document.getElementById('dd');
    //     let paragraphs = content.getElementsByTagName('p');

    //     for (let i = 0; i < paragraphs.length; i++) {
    //         let paragraph = paragraphs[i];
    //         let text = paragraph.textContent;

    //         let newText = document.createTextNode(text);

    //         paragraph.parentNode.replaceChild(newText, paragraph);
    //     }
    // }

    function extractTextFromHTML(htmlString) {
        const parser = new DOMParser();
        const doc = parser.parseFromString(htmlString, 'text/html');

        const textNodes = [];

        function extractText(node) {
            if (node.nodeType === Node.TEXT_NODE) {
                textNodes.push(node.textContent);
            } else if (node.nodeType === Node.ELEMENT_NODE) {
                const children = node.childNodes;
                for (let i = 0; i < children.length; i++) {
                    extractText(children[i]);
                }
            }
        }

        extractText(doc.body);
        return textNodes.join(' ');
    }


    function getHTMLTags() {
        // Get the <div> element by its ID
        const divElement = document.getElementById('dd');
        const pTagsArray = [];
        const pElement = document.getElementById('mmrg');
        if (pElement && pElement.parentNode === divElement) {
            // Remove the p element from the div
            divElement.removeChild(pElement);
        }

        // Check if the divElement exists
        if (divElement) {
            const allTags = divElement.getElementsByTagName('*'); // Get all tags within the div

            // const otherTagsArray = [];

            for (let i = 0; i < allTags.length; i++) {
                const tag = allTags[i];
                // console.log(tag)
                const nonBreakingSpace = '&nbsp'; // Non-breaking space

                // Finding the index of the first occurrence of &nbsp;
                let pt = ``
                if (tag.nodeName.toLowerCase() === 'p') {
                    let lineBreak = document.createElement('br');

                    // Insert <br> before </p>
                    tag.appendChild(lineBreak);



                    // If it's a <p> tag, add its text content to 'pTagsArray'
                    tag.textContent.split(' ').forEach((el) => {
                        let html = `<p>${el}</p>`

                        // Using a regular expression to replace only the first occurrence of '&nbsp;'
                        //var newText = el.replace(firstSpace, brTag);
                        var newText = el.replace(/\u00A0/g, "");
                        //  var newText = el.replace("<br>", /\u00A0/g,);
                        // var newText = el.replace("<br>", /\u00A0/g,);

                        pTagsArray.push(newText + ' ');



                    })


                }
                else if (tag.nodeName.toLowerCase() === 'h1' || tag.nodeName.toLowerCase() === 'h2' || tag.nodeName.toLowerCase() === 'h3') {
                    // console.log("running1111111")
                    let html = `<h2>${tag.textContent}</h2>`
                    pTagsArray.push(html + ' ');

                }

                else if (tag.nodeName.toLowerCase() === 'div') {

                    if (allTags[i].id === 'mmrg') {
                        const targetDiv = allTags[i];

                        // Find and remove the p tag with id "mmrg" inside that div
                        const pElement = targetDiv.getElementById('#mmrg');
                        if (pElement) {
                            targetDiv.removeChild(pElement);
                        }
                    }
                }

                else if (tag.nodeName.toLowerCase() === 'li') {

                    // pTagsArray.push(tag.outerHTML);

                }

                else if (tag.nodeName.toLowerCase() === 'span') {


                }
                else if (tag.nodeName.toLowerCase() === 'code') {


                }
                else if (tag.nodeName.toLowerCase() === 'section') {


                }


                else if (tag.nodeName.toLowerCase() === 'pre') {
                    tag.textContent.split(' ').forEach((el, index) => {
                        let html = `<p>${el}</p>`

                        pTagsArray.push(el + ' ');

                    })
                }

                else {
                    // If it's not a <p> tag, add it to 'otherTagsArray'

                    pTagsArray.push(tag.outerHTML);
                }
            }
            // console.log(otherTagsArray)

            // 'pTagsArray' now contains text content of <p> tags, and 'otherTagsArray' contains other tags within the div.
        } else {
            // console.log("Element with ID 'hjh' not found.");
        }
        // console.log(pTagsArray)
        return pTagsArray
    }

    function removeDivAndChildren(collection) {
        const resultCollection = document.createDocumentFragment(); // Create a new DocumentFragment to hold the modified elements
        let netel = []
        for (let i = 0; i < collection.length; i++) {
            const element = collection[i];

            // Check if the element is a <div>
            if (element.tagName === "DIV") {
                // If it's a <div>, skip this element and its descendants
            }
            else {
                netel.push(element)
            }
        }

        return netel; // Convert the DocumentFragment to an HTMLCollection
    }


    function checkCommonelement(arr, arr1) {
        let result = false
        if (arr.length != 0) {


            arr.forEach((elem) => {
                //if(elem.includes('|')){
                let checArr = elem.split('|')
                // console.log(arr1)
                // console.log(checArr)
                if (hasCommonElement(checArr, arr1)) {
                    // console.log("result")
                    // console.log(checArr)
                    // console.log(arr1)
                    result = true
                }
                // }
            })
        } else {
            result = true
        }
        return result
    }

    function hasCommonElement(arr1, arr2) {
        let updatedarr2 = arr2.map(e => e.toLowerCase())
        for (let element of arr1) {
            if (updatedarr2.includes(element.toLowerCase())) {
                return true;
            }
        }
        return false;
    }

    function containsAlternativewords(wordString, wordsToSearch) {
        let wordArray = []
        if (wordString.includes(',')) {
            wordArray = wordString.split(',');

        }
        else {
            wordArray = wordString.split(' ')
        }

        return wordArray.every(word => wordsToSearch.includes(word));
    }

</script>