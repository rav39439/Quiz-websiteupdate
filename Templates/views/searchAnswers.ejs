<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<style>
    p {
        margin-left: 12px;
    }
</style>

<body>
    <%- include('../partials/heading.hbs') %>

        <div id="tags" style="display: none;">
            <%=articles%>
        </div>
        <div id="documents" style="display: none;">
            <%=documents%>
        </div>
        <div class="input-group-prepend">
            <label for="topic"
                style="font-size: 20px; margin-bottom: 5px;font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;">Enter
                Queries</label>
            <input type="text" style=" border-radius:10px; width: 70%; height: 40px; margin-top:20px" id="queries"
                class="form-control" aria-describedby="basic-addon2">

            <button class="btn btn-primary mt-4" style=" border-radius:17px;" onclick="search()">
                search</button>
        </div>


        <div id="Ans" class="" style="width: 100%; ">

        </div>

        <div id="dd" style="display: none;">

        </div>

</body>

</html>

<script>
    let alltags
    let Tags
    let Documents
    let alltopicdetails=[]
    getAllTags()
    getAlldocuments()



    function getAllTags() {
        let tags = JSON.parse(document.getElementById('tags').innerText)
        Tags = tags.Tags
        console.log(Tags)

        let html = `<p>Two triangles are&nbsp;<a href="https://www.mathsisfun.com/geometry/similar.html">Similar</a>&nbsp;if the only difference is size (and possibly the need to turn or flip one around).</p><p class="center">These triangles are all similar:</p><p class="center"><img src="https://www.mathsisfun.com/geometry/images/tri-similar1.svg" alt="triangles similar different sizes and rotations" width="388" height="168"></p><p class="center">(Equal angles have been marked with the same number of arcs)</p><p>Notice that, as well as different sizes, some of them are turned or flipped.</p><p>&nbsp;</p><p>For similar triangles:</p><p class="center"><img src="https://www.mathsisfun.com/geometry/images/tri-corresponding-angles.svg" alt="corresponding angles on two triangles" width="272" height="126"><br>All corresponding angles are equal</p><p class="center"><em>and</em></p><p class="center"><img src="https://www.mathsisfun.com/geometry/images/tri-corresponding-sides.svg" alt="corresponding sides on two triangles" width="277" height="152"><br>All corresponding sides have the same&nbsp;<a href="https://www.mathsisfun.com/numbers/ratio.html">ratio</a></p><p>Also notice that the&nbsp;<span class="center">corresponding sides</span>&nbsp;face the corresponding angles. For example the sides that face the angles with two arcs&nbsp;are corresponding.</p><h2>Corresponding Sides</h2><p>In similar triangles,&nbsp;<span class="center">corresponding</span>&nbsp;sides are always in the same ratio.</p><p>For example:</p><p class="center"><img src="https://www.mathsisfun.com/geometry/images/tri-similar2.svg" alt="triangles similar R: (6,7,8) and S: (b,a,6.4)" width="360" height="133"></p><p>Triangles&nbsp;<strong>R</strong>&nbsp;and&nbsp;<strong>S</strong>&nbsp;are similar. The equal angles are marked with the same numbers of arcs.</p><p>What are the corresponding lengths?</p><ul><li>The lengths&nbsp;<strong>7</strong>&nbsp;and&nbsp;<strong>a</strong>&nbsp;are corresponding (they face the angle marked with one arc)</li><li>The lengths&nbsp;<strong>8</strong>&nbsp;and&nbsp;<strong>6.4</strong>&nbsp;are corresponding (they face the angle marked with two arcs)</li><li>The lengths&nbsp;<strong>6</strong>&nbsp;and&nbsp;<strong>b</strong>&nbsp;are corresponding (they face the angle marked with three arcs)</li></ul><h2>Calculating the Lengths of Corresponding Sides</h2><p>We can sometimes calculate lengths we don't know yet.</p><ul><li>Step 1: Find&nbsp;<strong>the ratio</strong>&nbsp;of corresponding sides</li><li>Step 2: Use that ratio to find the unknown lengths</li></ul><div class="example"><h3>Example: Find lengths a and b of Triangle S</h3><p class="center"><img src="https://www.mathsisfun.com/geometry/images/tri-similar2.svg" alt="triangles similar R: (6,7,8) and S: (b,a,6.4)" width="360" height="133"></p><h3>Step 1: Find the ratio</h3><p class="indent50px">We know all the sides in Triangle<strong>&nbsp;R</strong>, and<br>We know the side&nbsp;<strong>6.4</strong>&nbsp;in Triangle<strong>&nbsp;S</strong></p><p class="indent50px">The 6.4 faces the angle marked with two arcs as does the side of length 8 in triangle&nbsp;<strong>R</strong>.</p><p class="indent50px">So we can match&nbsp;<strong>6.4 with 8</strong>, and so the&nbsp;<a href="https://www.mathsisfun.com/numbers/ratio.html">ratio</a>&nbsp;of sides in triangle<strong>&nbsp;S</strong>&nbsp;to triangle&nbsp;<strong>R</strong>&nbsp;is:</p><p class="indent50px" align="center">6.4 to 8</p><p class="indent50px">Now we know that the lengths of sides in triangle<strong>&nbsp;S</strong>&nbsp;are all&nbsp;<strong>6.4/8 times</strong>&nbsp;the lengths of sides in triangle&nbsp;<strong>R</strong>.</p><h3>Step 2: Use the ratio</h3><div class="indent50px"><p><strong>a</strong>&nbsp;faces the angle with one arc as does the side of length 7 in triangle&nbsp;<strong>R</strong>.</p><div class="so"><strong>a</strong>&nbsp;= (6.4/8) &times; 7 = 5.6</div><p>&nbsp;</p><p><strong>b</strong>&nbsp;faces the angle with three arcs as does the side of length 6 in triangle&nbsp;<strong>R</strong>.</p><div class="so"><strong>b</strong>&nbsp;= (6.4/8) &times; 6 = 4.8</div><p>&nbsp;</p><p>Done!</p></div></div><div class="fun"><p><img src="https://www.mathsisfun.com/measure/images/thumb-distance-far.svg" alt="thumb distance far" width="" height=""></p><p>Did You Know? Similar triangles can help you&nbsp;<a href="https://www.mathsisfun.com/measure/estimate-distance.html">estimate distances</a>.</p></div>`
        document.getElementById('dd').innerHTML = html
        if (html.length > 0) {
            const htmlCollection = document.getElementsByTagName('p');
            // console.log(htmlCollection) // Replace 'p' with the tag name you want to select

            // Access the first element by index (index 0)
            // const firstElement = html[0];

            // Get the content of the first element
            // const firstLineContent = firstElement.textContent;

            // // Log or work with the content of the first line
            // console.log(firstelm);
        } else {
            console.log('HTML collection is empty.');
        }


    }

    function getAlldocuments() {
        let documents = JSON.parse(document.getElementById('documents').innerText)
        Documents = documents['Articledata']
        console.log(Documents)
        alltopicdetails=documents['Articledata'].map(e=>e.Topicdetails.split(' '))
        // documents['Articledata'].forEach((e)=>{
        //     let b=[]
        //     e.Topicdetails.split(' ').forEach((d)=>{
        //         b.push(d.trim())
        //     })
        //     alltopicdetails.push(b)
        // })
        console.log(alltopicdetails)
    }

    function search() {
        document.getElementById('Ans').innerHTML=``
        let query = document.getElementById('queries').value
        let arrayquery = query.split(' ')
        getTagsfromquery(arrayquery)
    }

    function getTagsfromquery(queryarr) {
        let resultantDoc 
        let tagsTosearch = Tags.filter(t => queryarr.includes(t.tag))
        console.log(tagsTosearch)
        let docArr = tagsTosearch.map(document => document.doc)

        // let result = hasDuplicates(docArr)
        // if (result) {
             resultantDoc = findMostRepeatedElement(docArr)

        // } else {
        //     resultantDoc = null
        // }

        showthisDoc(resultantDoc, tagsTosearch)

    }

    function showthisDoc(resultdoc, tagsTosearch) {
        let html=``

        tagsinques=tagsTosearch.map(e=>e.tag)
        // console.log(tagsTosearch)

        // console.log(alltopicdetails)
        let doci
        for(let i=0;i<alltopicdetails.length;i++){
            if(containsAllWordsdet(tagsinques,alltopicdetails[i])){

                doci=Documents[i]
            }
           
        }
        let doc
        if(typeof(doci)!='undefined'){
           doc=doci
        }
        else{
         doc==null
        }

        if(doc!=null){
        //  let doc = Documents.find(e => e.topicName == resultdoc)
     html = getExactAnsFromtext(doc, tagsTosearch)
        }
        else{
            html='`<h1> Not found </h1>`'
        }

         document.getElementById('dd').innerHTML=html
         getHTMLTags()
         let updatedHtml=getHTMLTags()
       //  console.log(updatedHtml.split(' '))
       
         settext(updatedHtml)
     
//         document.getElementById('Ans').innerHTML =
//             `
//     <div class="" style=" background-color: rgb(230, 230, 250);width: 100%;border-radius:16px;margin-top:40px;margin-left:5px" id="">
//     ${html}
// </div>
//     `

    }

    function getExactAnsFromtext(doc, tagsTosearch) {
        let docs = []
        // let arrayofTexts = doc.Text.map(d => d.replace(/<[^>]*>/g, ''))
        let newtags = []
        let filteredquestions = []
        doc.questions[0].split(',').forEach((e) => {
            filteredquestions.push(e.trim())
        })
        //  tagsTosearch=tagsTosearch.filter(dc=>filteredquestions.includes(dc.tags))

        tagsTosearch.forEach((dc) => {
            if (filteredquestions.includes(dc.tag)) {
                newtags.push(dc)
            }
        })
        tagsTosearch = newtags
        // console.log(filteredquestions)
        // console.log(tagsTosearch)

        //        console.log(doc.questions)
        let arrayofTexts = []
        doc.Text.forEach((e) => {
            document.getElementById('dd').innerHTML = e
            let text = document.getElementById('mmrg').innerText
            arrayofTexts.push(text)
            docs.push(document.getElementById('mmrg'))
        })
        wordstosearch = tagsTosearch.map(e => e.tag)
        let html = ArrwithAllwords(arrayofTexts, wordstosearch, doc.Text, docs)
        return html
    }


    function containsAllWords(wordString, wordsToSearch) {

        const wordArray = wordString.split(' ');
        return wordsToSearch.every(word => wordArray.includes(word));
    }

    // Check each string of words

    function ArrwithAllwords(arrayofTexts, wordsToSearch, htmlText, docs) {
        let text
        for (let i = 0; i < arrayofTexts.length; i++) {
            if (containsAllWords(arrayofTexts[i], wordsToSearch)) {
                text = htmlText[i]
                console.log('found')

                break
            } else {
                console.log("not found")
                text = `Not Found`
                continue
            }
        }
        return text
    }



    function findMostRepeatedElement(arr) {
        // Create an object to store the frequency of each element
        const frequencyMap = {};

        // Initialize variables to keep track of the most repeated element and its frequency
        let mostRepeatedElement;
        let maxFrequency = 0;

        // Iterate through the array and update the frequency map
        for (const element of arr) {
            if (frequencyMap[element]) {
                frequencyMap[element]++;
            } else {
                frequencyMap[element] = 1;
            }

            // Check if the current element has a higher frequency than the previous most repeated element
            if (frequencyMap[element] > maxFrequency) {
                mostRepeatedElement = element;
                maxFrequency = frequencyMap[element];
            }
        }

        return mostRepeatedElement;
    }

    function removeElement(doc, htmlCollection) {
        const elementToRemove = doc
        let resulthtml
        // Check if the element exists in the collection
        if (elementToRemove) {
            // Remove the element from the collection
            const index = Array.from(htmlCollection).indexOf(elementToRemove);
            if (index !== -1) {
                resulthtml = htmlCollection[index].remove();
            } else {
                resulthtml = htmlCollection
                console.log('Element not found in the collection.');
            }
        } else {
            console.log('Element with ID "dd" not found.');
        }
        return resulthtml
    }


    function hasDuplicates(array) {
        const uniqueValues = new Set(); // Use a Set to store unique values

        for (const item of array) {
            if (uniqueValues.has(item)) {
                return true; // Found a duplicate
            }
            uniqueValues.add(item);
        }

        return false; // No duplicates found
    }

    function containsAllWordsdet(userTags, documentTags) {
        for (let i = 0; i < documentTags.length; i++) {
    if (userTags.indexOf(documentTags[i]) === -1) {
      return false;
    }
  }
  return true;
// return documentTags.every(word => userTags.includes(word));
}

function isSpecificSubset(subset, superset) {
  for (let i = 0; i < subset.length; i++) {
    if (superset.indexOf(subset[i]) === -1) {
      return false;
    }
  }
  return true;
}
// settext()

// function settext(htmlarr) {
//   let b = htmlarr
//   let html = '';
//   let intervals = []; // Array to store interval IDs

//   for (let i = 0; i < b.length; i++) {
//     html += b[i] ;

//      setTimeout(() => {
      
//     //   if (i === b.length - 1) {
//     //     // Clear the interval when the loop is over
//     //     intervals.forEach(clearInterval);
//     //   }
//      }, 1000);
//      document.getElementById('Ans').innerHTML = html;

//    // intervals.push(interval); // Store the interval ID in the array
//   }
// }

// function settext(wordArray) {
  let index = 0;

//   function settext(wordArray) {
//     if (index < wordArray.length) {
//        console.log(wordArray[index]);
//       index++;
//       setTimeout(()=>{
//         document.getElementById('Ans').innerHTML = wordArray[index];

//       },1000); // 1000 milliseconds = 1 second
//     }
//   }

function settext(wordArray) {
  for (let i = 0; i < wordArray.length; i++) {
    let html=``

    html+=wordArray[i]
    setTimeout(() => {
        document.getElementById('Ans').innerHTML=document.getElementById('Ans').innerHTML+wordArray[i];
    },i*50); // Delay each word by i seconds
  }
}

  
//}



// function htmlToArray(htmlString) {
//   const tempDiv = document.createElement('div');
//   tempDiv.innerHTML = htmlString;

//   const childNodes = Array.from(tempDiv.childNodes);

//   const resultArray = [];
  
//   childNodes.forEach(node => {
//     if (node.nodeType === Node.ELEMENT_NODE) {
//       // If it's an HTML element, add it to the resultArray
//       resultArray.push(node);
//     } else if (node.nodeType === Node.TEXT_NODE) {
//       // If it's a text node, split it by words and add each word to the resultArray
//       const words = node.textContent.trim().split(/\s+/);
//       words.forEach(word => {
//         resultArray.push(document.createTextNode(word));
//       });
//     }
//   });

//   return resultArray;
// }

// function updatedHtml(){
//     let content = document.getElementById('dd');
//     let paragraphs = content.getElementsByTagName('p');

//     for (let i = 0; i < paragraphs.length; i++) {
//         let paragraph = paragraphs[i];
//         let text = paragraph.textContent;
        
//         let newText = document.createTextNode(text);
        
//         paragraph.parentNode.replaceChild(newText, paragraph);
//     }
// }

function extractTextFromHTML(htmlString) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(htmlString, 'text/html');
  
  const textNodes = [];
  
  function extractText(node) {
    if (node.nodeType === Node.TEXT_NODE) {
      textNodes.push(node.textContent);
    } else if (node.nodeType === Node.ELEMENT_NODE) {
      const children = node.childNodes;
      for (let i = 0; i < children.length; i++) {
        extractText(children[i]);
      }
    }
  }
  
  extractText(doc.body);
  return textNodes.join(' ');
}


function getHTMLTags(){
    // Get the <div> element by its ID
const divElement = document.getElementById('dd');
const pTagsArray = [];

// Check if the divElement exists
if (divElement) {
    const allTags = divElement.getElementsByTagName('*'); // Get all tags within the div

    // const otherTagsArray = [];

    for (let i = 0; i < allTags.length; i++) {
        const tag = allTags[i];
        if (tag.nodeName.toLowerCase() === 'p') {
            // If it's a <p> tag, add its text content to 'pTagsArray'
                tag.textContent.split(' ').forEach((el)=>{
                    let html=`<p>${el}</p>`
                    pTagsArray.push(el + ' ');
                })
        } else {
            // If it's not a <p> tag, add it to 'otherTagsArray'
                pTagsArray.push(tag.outerHTML);
        }
    }
    console.log(pTagsArray)
    // console.log(otherTagsArray)

    // 'pTagsArray' now contains text content of <p> tags, and 'otherTagsArray' contains other tags within the div.
} else {
    console.log("Element with ID 'hjh' not found.");
}
return pTagsArray
}


</script>